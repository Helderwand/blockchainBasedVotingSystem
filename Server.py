import json
import warnings
from urllib3.exceptions import InsecureRequestWarning
from web3 import Web3
from eth_utils import (
    keccak,
    to_bytes,
    to_checksum_address,
    encode_hex,
    int_to_big_endian,
)
from eth_account import Account
from flask import Flask, render_template, request

warnings.filterwarnings("ignore", category=InsecureRequestWarning)

class TransactionStruct:
    def __init__(self, from_address, receiver_address, user_id, election_id, candidate_id, timestamp):
        self.from_address = from_address
        self.receiver_address = receiver_address
        self.user_id = user_id
        self.election_id = election_id
        self.candidate_id = candidate_id
        self.timestamp = timestamp 

        
app = Flask(__name__)

# Ganache server configuration
ganache_url = "HTTP://127.0.0.1:7545"
network_id = 5777 
# Connect to Ganache
w3 = Web3(Web3.HTTPProvider(ganache_url))# replace with your Ethereum URL

# Check if connected
if w3.is_connected():
    print("Connected to Ganache")
else:
    print("Connection to Ganache failed")

# Get network information
network_info = w3.net.version
print(f"Connected to network with ID: {network_info}")
 
contract_address = None
if w3.is_connected:
    print("Connected to Ethereum node")
else:
    print("Failed to connect to Ethereum node")

# load the compuled smart contract abi and bytecode and insert the abi

contract_abi = [
    {
        "constant": False,
        "inputs": [
            {"name": "receiver", "type": "address"},
            {"name": "user_id", "type": "string"},
            {"name": "election_id", "type": "string"},
            {"name": "candidate_id", "type": "string"}
        ],
        "name": "addToBlockchain",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "getAllTransaction",
        "outputs": [{"name": "", "type": "tuple[]"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "getTransactionCount",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "anonymous": False,
        "inputs": [
            {"indexed": True, "name": "from", "type": "address"},
            {"indexed": True, "name": "receiver", "type": "address"},
            {"indexed": False, "name": "user_id", "type": "string"},
            {"indexed": False, "name": "election_id", "type": "string"},
            {"indexed": False, "name": "candidate_id", "type": "string"},
            {"indexed": False, "name": "timestamp", "type": "uint256"}
        ],
        "name": "Transfer",
        "type": "event",
    },
]  

contract_bytecode = '608060405234801561000f575f80fd5b506112bc8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c8063069953a71461006457806325ecc6e0146100945780632e7700f0146100b0578063add6415d146100ce578063ba7f7552146100ec578063da650ec61461011c575b5f80fd5b61007e60048036038101906100799190610a4e565b61013a565b60405161008b9190610aad565b60405180910390f35b6100ae60048036038101906100a99190610b20565b610161565b005b6100b861034e565b6040516100c59190610aad565b60405180910390f35b6100d6610356565b6040516100e39190610dd0565b60405180910390f35b61010660048036038101906101019190610a4e565b610615565b6040516101139190610aad565b60405180910390f35b610124610642565b6040516101319190610dd0565b60405180910390f35b5f60028260405161014b9190610e2a565b9081526020016040518091039020549050919050565b60015f808282546101729190610e6d565b9250508190555060016040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200142815250908060018154018082558091505060019003905f5260205f2090600602015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019081610299919061109a565b5060608201518160030190816102af919061109a565b5060808201518160040190816102c5919061109a565b5060a08201518160050155505060016002826040516102e49190610e2a565b90815260200160405180910390205f8282546103009190610e6d565b925050819055507fc2a008061ffd24e1e90903faea6d67542ba54406f86b22a777a70e562741390733858585854260405161034096959493929190611212565b60405180910390a150505050565b5f8054905090565b60606001805480602002602001604051908101604052809291908181526020015f905b8282101561060c578382905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461045390610ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461047f90610ecd565b80156104ca5780601f106104a1576101008083540402835291602001916104ca565b820191905f5260205f20905b8154815290600101906020018083116104ad57829003601f168201915b505050505081526020016003820180546104e390610ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461050f90610ecd565b801561055a5780601f106105315761010080835404028352916020019161055a565b820191905f5260205f20905b81548152906001019060200180831161053d57829003601f168201915b5050505050815260200160048201805461057390610ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461059f90610ecd565b80156105ea5780601f106105c1576101008083540402835291602001916105ea565b820191905f5260205f20905b8154815290600101906020018083116105cd57829003601f168201915b5050505050815260200160058201548152505081526020019060010190610379565b50505050905090565b6002818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b60606001805480602002602001604051908101604052809291908181526020015f905b828210156108f8578382905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461073f90610ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461076b90610ecd565b80156107b65780601f1061078d576101008083540402835291602001916107b6565b820191905f5260205f20905b81548152906001019060200180831161079957829003601f168201915b505050505081526020016003820180546107cf90610ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546107fb90610ecd565b80156108465780601f1061081d57610100808354040283529160200191610846565b820191905f5260205f20905b81548152906001019060200180831161082957829003601f168201915b5050505050815260200160048201805461085f90610ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461088b90610ecd565b80156108d65780601f106108ad576101008083540402835291602001916108d6565b820191905f5260205f20905b8154815290600101906020018083116108b957829003601f168201915b5050505050815260200160058201548152505081526020019060010190610665565b50505050905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6109608261091a565b810181811067ffffffffffffffff8211171561097f5761097e61092a565b5b80604052505050565b5f610991610901565b905061099d8282610957565b919050565b5f67ffffffffffffffff8211156109bc576109bb61092a565b5b6109c58261091a565b9050602081019050919050565b828183375f83830152505050565b5f6109f26109ed846109a2565b610988565b905082815260208101848484011115610a0e57610a0d610916565b5b610a198482856109d2565b509392505050565b5f82601f830112610a3557610a34610912565b5b8135610a458482602086016109e0565b91505092915050565b5f60208284031215610a6357610a6261090a565b5b5f82013567ffffffffffffffff811115610a8057610a7f61090e565b5b610a8c84828501610a21565b91505092915050565b5f819050919050565b610aa781610a95565b82525050565b5f602082019050610ac05f830184610a9e565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610aef82610ac6565b9050919050565b610aff81610ae5565b8114610b09575f80fd5b50565b5f81359050610b1a81610af6565b92915050565b5f805f8060808587031215610b3857610b3761090a565b5b5f610b4587828801610b0c565b945050602085013567ffffffffffffffff811115610b6657610b6561090e565b5b610b7287828801610a21565b935050604085013567ffffffffffffffff811115610b9357610b9261090e565b5b610b9f87828801610a21565b925050606085013567ffffffffffffffff811115610bc057610bbf61090e565b5b610bcc87828801610a21565b91505092959194509250565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f610c0b82610ac6565b9050919050565b610c1b81610c01565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610c58578082015181840152602081019050610c3d565b5f8484015250505050565b5f610c6d82610c21565b610c778185610c2b565b9350610c87818560208601610c3b565b610c908161091a565b840191505092915050565b610ca481610a95565b82525050565b5f60c083015f830151610cbf5f860182610c12565b506020830151610cd26020860182610c12565b5060408301518482036040860152610cea8282610c63565b91505060608301518482036060860152610d048282610c63565b91505060808301518482036080860152610d1e8282610c63565b91505060a0830151610d3360a0860182610c9b565b508091505092915050565b5f610d498383610caa565b905092915050565b5f602082019050919050565b5f610d6782610bd8565b610d718185610be2565b935083602082028501610d8385610bf2565b805f5b85811015610dbe5784840389528151610d9f8582610d3e565b9450610daa83610d51565b925060208a01995050600181019050610d86565b50829750879550505050505092915050565b5f6020820190508181035f830152610de88184610d5d565b905092915050565b5f81905092915050565b5f610e0482610c21565b610e0e8185610df0565b9350610e1e818560208601610c3b565b80840191505092915050565b5f610e358284610dfa565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610e7782610a95565b9150610e8283610a95565b9250828201905080821115610e9a57610e99610e40565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610ee457607f821691505b602082108103610ef757610ef6610ea0565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610f597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610f1e565b610f638683610f1e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f610f9e610f99610f9484610a95565b610f7b565b610a95565b9050919050565b5f819050919050565b610fb783610f84565b610fcb610fc382610fa5565b848454610f2a565b825550505050565b5f90565b610fdf610fd3565b610fea818484610fae565b505050565b5b8181101561100d576110025f82610fd7565b600181019050610ff0565b5050565b601f8211156110525761102381610efd565b61102c84610f0f565b8101602085101561103b578190505b61104f61104785610f0f565b830182610fef565b50505b505050565b5f82821c905092915050565b5f6110725f1984600802611057565b1980831691505092915050565b5f61108a8383611063565b9150826002028217905092915050565b6110a382610c21565b67ffffffffffffffff8111156110bc576110bb61092a565b5b6110c68254610ecd565b6110d1828285611011565b5f60209050601f831160018114611102575f84156110f0578287015190505b6110fa858261107f565b865550611161565b601f19841661111086610efd565b5f5b8281101561113757848901518255600182019150602085019450602081019050611112565b868310156111545784890151611150601f891682611063565b8355505b6001600288020188555050505b505050505050565b61117281610c01565b82525050565b5f61119261118d61118884610ac6565b610f7b565b610ac6565b9050919050565b5f6111a382611178565b9050919050565b5f6111b482611199565b9050919050565b6111c4816111aa565b82525050565b5f82825260208201905092915050565b5f6111e482610c21565b6111ee81856111ca565b93506111fe818560208601610c3b565b6112078161091a565b840191505092915050565b5f60c0820190506112255f830189611169565b61123260208301886111bb565b818103604083015261124481876111da565b9050818103606083015261125881866111da565b9050818103608083015261126c81856111da565b905061127b60a0830184610a9e565b97965050505050505056fea26469706673582212203cdbb5eccf7438e6ff6084c4899819b10f51e6c95a72eced6f2ac2fe6632d73864736f6c63430008170033'

# deploy the smaet contract
#
#deployer_address = w3.eth.account.from_key(deployer_private_key).address
deployer_private_key = '0xd69aa6eea7884f7d1f8989b03030270dbf90350f8239385f3b7e38f7dde0c29c'
deployer_account = w3.eth.account.from_key(deployer_private_key)
deployer_address = deployer_account.address
deployer_balance = w3.eth.get_balance(deployer_address)

print(f"Deployer balance: {deployer_balance}")
print(f"Deployer account: {deployer_account}")
print(f"Deployer adress: {deployer_address}")
    # Get the nonce for the deployer address
#nonce = w3.eth.get_transaction_count(deployer_address)
#print(nonce)


def deploy_contract():
    # Get the nonce for the deployer address
    # nonce = w3.eth.getTransactionCount(deployer_address)

    # Build the transaction dictionary
    try:
        tx_hash = w3.eth.send_transaction({
            'from': deployer_address,
            'gas': 6721975,  # Adjust as needed
            'gasPrice': 19908822276,  # Adjust as needed
            'data': contract_bytecode,
            'nonce': w3.eth.get_transaction_count(deployer_address),
        })
        print(tx_hash)
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        # Use the contract factory to deploy the contract
        contract_factory = w3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
        contract_address = receipt['contractAddress']

        # Instantiate the deployed contract
        deployed_contract = contract_factory(address=contract_address)
        return deployed_contract, contract_address

    except Exception as e:
        print(f"Contract deployment failed: {str(e)}")
        return None, None
    

#if deployed_contract:
 #   print(f"Contract deployed successfully at address: {deployed_contract_address}")
#else:
 #   print("Contract deployment failed.")

# set to store registered voters
registered_voters = set()

@app.route('/')
def index():
    return render_template('client.html')

@app.route('/register', methods=['POST'])
def register_voter():
    try:
        data = request.form.to_dict()
        voter_id = data.get('voter_id')

        if not voter_id:
            return render_template('error.html', error="Voter ID is required")

        if voter_id in registered_voters:
            return render_template('error.html', error="Voter already registered")

        registered_voters.add(voter_id)
        return render_template('success.html', message="Voter registered successfully")

    except Exception as e:
        return render_template('error.html', error=str(e))

@app.route('/vote', methods=['POST'])
def vote():
    data = request.form.to_dict()
    candidate = data.get('candidate')
    voter_id = data.get('voter_id')

    if not candidate or not voter_id:
        return render_template('result.html', error="Candidate and Voter ID are required")

    if voter_id not in registered_voters:
        return render_template('result.html', error="Voter not registered")

    # call the addtoblockchain in the smart contract
    transaction = contract.functions.addToBlockchain(deployer_address, voter_id, "election_id", candidate)
    tx_hash = transaction.transact({'from': deployer_address, 'gas': 200000})

    return render_template('success.html', message=f'Vote added to the blockchain. Tx Hash: {tx_hash.hex()}')

@app.route('/chain', methods=['GET'])
def full_chain():# retrieve all transactions from s,art contract
    transactions = contract.functions.getAllTransaction().call()

    return render_template('chain.html')

@app.route('/display_results', methods=['GET'])
def display_results():
    try:
        # instantiate the deployed contract
        contract = w3.eth.contract(address=contract_address, abi=contract_abi)

        # retrieve voting results from the smart contract
        results = contract.functions.getAllTransaction().call()

        if results is None:
            # handle the case no results
            return render_template('result.html')

        return render_template('result.html')

    except Exception as e:
        # Handle any exceptions
        return render_template('result.html')
    
if __name__ == '__main__':
    # Deploy contract if it is not deploted
    #if contract_address is None:
        #deploy_contract()

    # instantiate the deployed contract
    contract = w3.eth.contract(address=contract_address, abi=contract_abi)

    # flask runn
    app.run(host='127.0.0.1', port=5001, debug=True)